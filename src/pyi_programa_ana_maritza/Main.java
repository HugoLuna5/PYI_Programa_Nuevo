/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pyi_programa_ana_maritza;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import static pyi_programa_ana_maritza.VistaPrincipal.options;
import pyi_programa_ana_maritza.algoritmos.Dijkstra;
import pyi_programa_ana_maritza.algoritmos.Floyd;
import pyi_programa_ana_maritza.algoritmos.Warshall;
import pyi_programa_ana_maritza.interfaces.Dib;
import pyi_programa_ana_maritza.modelos.Grafo;
import pyi_programa_ana_maritza.utils.TareaSleep;

/**
 *
 * @author Dell
 */
public class Main extends javax.swing.JFrame implements ActionListener {

    //Declaracion de variables globales
    public PanelPersonalizado lienzo;
    public JScrollPane scroll;
    public JMenuBar menuBar;
    public JMenu archivo;
    public JMenuItem nuevo, salir;
    public Grafo grafo;
    public Font fuente;
    public String txtEn, txtSal;
    public Dib dib;
    public Integer perm, permutacion[], menor, no, permutacionV[];
    public boolean activateDelNod = false;
    public static final String[] options = {"Dijkstra", "Floyd", "Warshall"};

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenedor = new javax.swing.JPanel();
        contenedorBotones = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnConectar = new javax.swing.JButton();
        btnEjecutar = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        contenedor.setLayout(new java.awt.BorderLayout());
        getContentPane().add(contenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 0, 810, 705));

        contenedorBotones.setBackground(new java.awt.Color(102, 153, 255));

        jLabel1.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("La ruta m√°s corta");

        btnEliminar.setBackground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("ELIMINAR NODO");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnConectar.setBackground(new java.awt.Color(255, 255, 255));
        btnConectar.setText("CONECTAR NODOS");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        btnEjecutar.setBackground(new java.awt.Color(255, 255, 255));
        btnEjecutar.setText("EJECUTAR");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 255, 255));
        btnExit.setText("SALIR");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contenedorBotonesLayout = new javax.swing.GroupLayout(contenedorBotones);
        contenedorBotones.setLayout(contenedorBotonesLayout);
        contenedorBotonesLayout.setHorizontalGroup(
            contenedorBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorBotonesLayout.createSequentialGroup()
                .addGroup(contenedorBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contenedorBotonesLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contenedorBotonesLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(contenedorBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConectar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEjecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        contenedorBotonesLayout.setVerticalGroup(
            contenedorBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorBotonesLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(391, Short.MAX_VALUE))
        );

        getContentPane().add(contenedorBotones, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * Conectar nodos con las aristas
     *
     * @param evt
     */
    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        // TODO add your handling code here:

        txtEn = JOptionPane.showInputDialog("Ingresa el nombre del primer nodo");

        while (txtEn == null && txtEn.isEmpty()) {
            txtEn = JOptionPane.showInputDialog("Ingresa el nombre del primer nodo");
        }

        txtSal = JOptionPane.showInputDialog("Ingresa el nombre del segundo nodo");

        while (txtSal == null && txtSal.isEmpty()) {
            txtSal = JOptionPane.showInputDialog("Ingresa el nombre del segundo nodo");
        }

        inAris();
    }//GEN-LAST:event_btnConectarActionPerformed

    /**
     * Boton para ejecutar los algoritmos
     *
     * @param evt
     */
    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed

        String algortimosRes = (String) JOptionPane.showInputDialog(this,
                "Opciones",
                "Elige el algoritmo a ejecutar",
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        try {

          

            switch (algortimosRes) {
                case "Dijkstra":
                    System.out.println("Seleccionaste el algoritmo Dijkstra");

                    dijkstra();

                    break;
                case "Floyd":
                    System.out.println("Seleccionaste el algoritmo Floyd");
                    floyd();
                    break;
                case "Warshall":
                    System.out.println("Seleccionaste el algoritmo Warshall");
                    warshall();
                    break;
                default:
                    break;
            }
        } catch (NullPointerException ex) {
            System.err.println("Error: " + ex.getMessage());
        }


    }//GEN-LAST:event_btnEjecutarActionPerformed

    public void dijkstra() {
        lienzo.paint(lienzo.getGraphics());
        if (grafo.noNodos == 0) {
            return;
        }
        String[] c = new String[2];
        c[0] = "Algortimo de Dijkstra";
        String de = JOptionPane.showInputDialog("Nombre del nodo origen");
        if (de.equals("")) {
            return;
        }
        String a = JOptionPane.showInputDialog("Nombre del nodo destino");
        if (a.equals("")) {
            return;
        }
        try {
            if (grafo.exNodo(parser(de)) && grafo.exNodo(parser(a))) {
                Dijkstra dij = new Dijkstra(grafo, parser(de), parser(a));
                c[1] = dij.empezar();
                TareaSleep hilo = new TareaSleep(grafo, lienzo, c);
                hilo.start();
            } else {
                JOptionPane.showMessageDialog(null, "El nombre de un nodo no es valido");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "El nombre de un nodo no es valido");
        }
    }

    public void floyd() {
        lienzo.paint(lienzo.getGraphics());
        if (grafo.noNodos == 0) {
            return;
        }
        String[] c = new String[2];
        c[0] = "Algortimo de Floyd";
        String de = JOptionPane.showInputDialog("Nombre del nodo origen");
        if (de.equals("")) {
            return;
        }
        String a = JOptionPane.showInputDialog("Nombre del nodo destino");
        if (a.equals("")) {
            return;
        }
        try {
            if (grafo.exNodo(parser(de)) && grafo.exNodo(parser(a))) {
                Floyd floy = new Floyd(grafo, parser(de), parser(a));
                c[1] = floy.empezar();
                TareaSleep hilo = new TareaSleep(grafo, lienzo, c);
                hilo.start();
            } else {
                JOptionPane.showMessageDialog(null, "El nombre de un nodo no es valido");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "El nombre de un nodo no es valido");
        }
    }

    public void warshall() {
        lienzo.paint(lienzo.getGraphics());
        if (grafo.noNodos == 0) {
            return;
        }
        String[] c = new String[2];
        c[0] = "Algortimo de Warshall";
        String de = JOptionPane.showInputDialog("Nombre del nodo origen");
        if (de.equals("")) {
            return;
        }
        String a = JOptionPane.showInputDialog("Nombre del nodo destino");
        if (a.equals("")) {
            return;
        }
        try {
            if (grafo.exNodo(parser(de)) && grafo.exNodo(parser(a))) {
                Warshall war = new Warshall(grafo, parser(de), parser(a));
                c[1] = war.empezar();
                TareaSleep hilo = new TareaSleep(grafo, lienzo, c);
                hilo.start();
            } else {
                JOptionPane.showMessageDialog(null, "El nombre de un nodo no es valido");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "El nombre de un nodo no es valido");
        }
    }


    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * Inicializar los componentes en la vista
     */
    public void init() {
        dib = null;
        permutacion = new Integer[1000];
        permutacionV = new Integer[1000];
        grafo = new Grafo();
        fuente = new Font("Purisa", 1, 12);
        lienzo = new PanelPersonalizado(grafo);
        menuBar = new JMenuBar();
        menuBar.setFont(new Font("Purisa", 1, 12));

        /**
         * Opciones del menu
         */
        archivo = new JMenu("Archivo");

        archivo.setFont(new Font("Purisa", 1, 12));

        nuevo = new JMenuItem("Reiniciar");
        nuevo.setFont(fuente);

        salir = new JMenuItem("Salir");
        salir.setFont(fuente);

        /**
         * Agregar eventos de escucha a los componentes
         */
        archivo.add(nuevo).addActionListener(this);

        archivo.add(salir).addActionListener(this);

        /**
         * Agregar opciones al menu
         */
        menuBar.add(archivo);

        

        //setLayout(new BorderLayout());
        /**
         * Agregar opciones al menu
         */
        this.setJMenuBar(menuBar);
        //agregar panel a la vista
        contenedor.add(lienzo);

        this.setMinimumSize(new Dimension(700, 700));//definir el tama√±o minimo de la ventana
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        lienzo.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent me) {

                if (me.getButton() == MouseEvent.BUTTON1) {
                    lienzoMousePressed(me);
                }
                if (me.getButton() == MouseEvent.BUTTON2) {
                }
                if (me.getButton() == MouseEvent.BUTTON3) {
                    String opciones = (String) JOptionPane.showInputDialog(Main.this,
                            "Opciones",
                            "Modificar Nodos - Aristas",
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            options,
                            options[0]);

                    switch (opciones) {
                        case "Si":
                            clickMouseRightSi(me);
                            break;
                        case "No":

                            break;
                    }
                }

            }

            @Override
            public void mouseClicked(java.awt.event.MouseEvent me) {

            }
        });

        try {

            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception ex) {
        }

    }

    public void clickMouseRightSi(MouseEvent evt) {

        String nod = JOptionPane.showInputDialog("Ingrese el nombre del nodo a eliminar");
        grafo.EliminarNodo(Integer.parseInt(nod));
        lienzo.paint(lienzo.getGraphics());
        //lienzo.repaint();

    }

    /**
     * click en la vista
     *
     * @param evt
     */
    public void lienzoMousePressed(MouseEvent evt) {
        if ((dib = lienzo.dameFigura(evt)) == null) {
            grafo.InsertaNodo(++grafo.noNodos, evt.getX(), evt.getY());
            lienzo.paint(lienzo.getGraphics());
        } else {
            dib = null;
        }
    }

    /**
     * Manejo de clicks en la vista
     *
     * @param e
     */
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == nuevo) {
            grafo = new Grafo();
            lienzo.arbol = grafo;
            lienzo.nodos = grafo.nodosA;
            lienzo.repaint();
        }


        /**
         * Cuando se da click en la opcion del menu salir
         */
        if (e.getSource() == salir) {
            System.exit(0);

        }

        /**
         * Cuando se selecciona el algoritmo Warshall
         */
    }

    /**
     * Generar dialogo personalizado
     *
     * @param gra
     * @param title
     */
    private void genCuadro(Grafo gra, String title) {
        JDialog dialogo = new JDialog();
        dialogo.setTitle(title);
        PanelPersonalizado l = new PanelPersonalizado(gra);
        dialogo.add(l);
        dialogo.setSize(new Dimension(400, 300));
        dialogo.setVisible(true);
        l.paint(lienzo.getGraphics());
    }

    /**
     * Iniciar crear aristas
     */
    private void inAris() {
        if (txtEn.equals("") || txtSal.equals("")) {
            JOptionPane.showMessageDialog(null, "Seleccione los nodos a unir");
            return;
        }
        try {
            if (parser(txtEn) == parser(txtSal)) {
                JOptionPane.showMessageDialog(null, "Inserte nombres de nodos diferentes");
                return;
            }
            if (!grafo.exNodo(parser(txtEn)) || !grafo.exNodo(parser(txtSal))) {
                JOptionPane.showMessageDialog(null, "Inserte nombre de nodos validos");
                return;
            }
            if (grafo.exArista(parser(txtEn), parser(txtSal))) {
                JOptionPane.showMessageDialog(null, "Estos nodos ya estan unidos");
                return;
            }
            grafo.InsertaArista(parser(txtEn), parser(txtSal));
            lienzo.paint(lienzo.getGraphics());

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Inserte nombres de nodos validos");
        }
    }

    /**
     * Convertir tipo de dato
     *
     * @param p
     * @return
     */
    private Integer parser(String p) {
        return Integer.parseInt(p);
    }

    /**
     * Dialogo personalizado
     *
     * @param title
     * @param cad
     */
    public void dialog(String title, String cad) {
        JScrollPane scr = new JScrollPane();
        scr.setSize(300, 500);
        JDialog dialogo = new JDialog();
        dialogo.setTitle(title);
        JTextArea area = new JTextArea();
        dialogo.setSize(300, 500);
        area.setSize(300, 500);
        scroll.setViewportView(area);
        dialogo.add(scroll);
        area.setText(cad);
    }

    /**
     * Generar permuta
     *
     * @param n
     * @param j
     * @param x
     */
    public void genPermu(Integer n, Integer j, Integer[] x) {
        Integer i;

        if (j < n) {
            for (i = j; i < n; i++) {
                int t = x[i];
                x[i] = x[j];
                x[j] = t;
                genPermu(n, j + 1, x);
                t = x[i];
                x[i] = x[j];
                x[j] = t;
            }
        }

    }

    /**
     * Generar factorial
     *
     * @param n
     * @return
     */
    private long factorial(long n) {
        if (n == 1) {
            return 1;
        } else {
            return n * factorial(n - 1);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnExit;
    private javax.swing.JPanel contenedor;
    private javax.swing.JPanel contenedorBotones;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
